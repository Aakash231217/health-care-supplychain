// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// User & Authentication Models
// ============================================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(VIEWER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  createdRFQs   RFQ[]     @relation("CreatedRFQs")
  createdPOs    PurchaseOrder[]
  auditLogs     AuditLog[]

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  PROCUREMENT_MANAGER
  QUALITY_OFFICER
  VENDOR_MANAGER
  FINANCE_OFFICER
  LOGISTICS_COORDINATOR
  VIEWER
}

// ============================================
// Product Management Models
// ============================================

model Product {
  id                String            @id @default(cuid())
  sku               String            @unique
  name              String
  description       String?           @db.Text
  category          String
  subCategory       String?
  unitOfMeasure     String
  reorderPoint      Int?
  leadTime          Int?              // in days
  qualityRating     Float?            @default(0)
  complianceStatus  ComplianceStatus  @default(PENDING)
  status            ProductStatus     @default(ACTIVE)
  metadata          Json?             // Flexible JSON for additional attributes
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  rfqItems          RFQItem[]
  quotes            Quote[]
  poItems           POItem[]
  qualityChecks     QualityCheck[]
  productHistory    ProductHistory[]

  @@index([sku])
  @@index([category])
  @@index([status])
}

model ProductHistory {
  id          String   @id @default(cuid())
  productId   String
  field       String
  oldValue    String?  @db.Text
  newValue    String?  @db.Text
  changedBy   String
  changedAt   DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  ON_HOLD
  DISCONTINUED
}

enum ComplianceStatus {
  PENDING
  COMPLIANT
  NON_COMPLIANT
  UNDER_REVIEW
}

// ============================================
// Vendor Management Models
// ============================================

model Vendor {
  id                    String   @id @default(cuid())
  name                  String
  contactPerson         String?
  email                 String   @unique
  phone                 String?
  address               String?  @db.Text
  performanceRating     Float    @default(0)
  qualityScore          Float    @default(0)
  responsivenessScore   Float    @default(0)
  complianceHistory     Json?
  specializations       Json?    // Array of product categories
  certifications        Json?    // Array of certifications
  paymentTerms          String?
  leadTimeAverage       Int?     // in days
  status                VendorStatus @default(ACTIVE)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  rfqVendors            RFQVendor[]
  quotes                Quote[]
  purchaseOrders        PurchaseOrder[]
  shipments             Shipment[]
  vendorPerformance     VendorPerformance[]

  @@index([email])
  @@index([status])
}

model VendorPerformance {
  id                String   @id @default(cuid())
  vendorId          String
  month             DateTime
  onTimeDelivery    Float    // percentage
  qualityRating     Float
  responseTime      Float    // average hours
  totalOrders       Int
  defectRate        Float    // percentage
  createdAt         DateTime @default(now())

  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@unique([vendorId, month])
  @@index([vendorId])
}

enum VendorStatus {
  ACTIVE
  INACTIVE
  BLACKLISTED
  UNDER_REVIEW
}

// ============================================
// RFQ (Request for Quote) Models
// ============================================

model RFQ {
  id                  String      @id @default(cuid())
  rfqNumber           String      @unique
  title               String
  description         String?     @db.Text
  issueDate           DateTime    @default(now())
  dueDate             DateTime
  status              RFQStatus   @default(DRAFT)
  specialRequirements String?     @db.Text
  termsAndConditions  String?     @db.Text
  createdById         String
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  // Relations
  createdBy   User        @relation("CreatedRFQs", fields: [createdById], references: [id])
  items       RFQItem[]
  vendors     RFQVendor[]
  quotes      Quote[]

  @@index([rfqNumber])
  @@index([status])
  @@index([dueDate])
}

model RFQItem {
  id          String   @id @default(cuid())
  rfqId       String
  productId   String
  quantity    Int
  targetPrice Float?
  notes       String?  @db.Text

  rfq     RFQ     @relation(fields: [rfqId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([rfqId])
  @@index([productId])
}

model RFQVendor {
  id              String    @id @default(cuid())
  rfqId           String
  vendorId        String
  invitedAt       DateTime  @default(now())
  reminderSentAt  DateTime?
  viewedAt        DateTime?
  respondedAt     DateTime?

  rfq    RFQ    @relation(fields: [rfqId], references: [id], onDelete: Cascade)
  vendor Vendor @relation(fields: [vendorId], references: [id])

  @@unique([rfqId, vendorId])
  @@index([rfqId])
  @@index([vendorId])
}

enum RFQStatus {
  DRAFT
  ISSUED
  RESPONSES_RECEIVED
  EVALUATION
  CLOSED
  CANCELLED
}

// ============================================
// Quote Models
// ============================================

model Quote {
  id                String      @id @default(cuid())
  quoteNumber       String      @unique
  rfqId             String
  vendorId          String
  productId         String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  deliveryDate      DateTime
  paymentTerms      String?
  validityPeriod    Int?        // in days
  specialConditions String?     @db.Text
  status            QuoteStatus @default(SUBMITTED)
  submittedAt       DateTime    @default(now())
  evaluatedAt       DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  rfq            RFQ             @relation(fields: [rfqId], references: [id])
  vendor         Vendor          @relation(fields: [vendorId], references: [id])
  product        Product         @relation(fields: [productId], references: [id])
  purchaseOrder  PurchaseOrder?

  @@index([quoteNumber])
  @@index([rfqId])
  @@index([vendorId])
  @@index([status])
}

enum QuoteStatus {
  SUBMITTED
  UNDER_REVIEW
  SHORTLISTED
  ACCEPTED
  REJECTED
  EXPIRED
}

// ============================================
// Purchase Order Models
// ============================================

model PurchaseOrder {
  id                    String        @id @default(cuid())
  poNumber              String        @unique
  quoteId               String        @unique
  vendorId              String
  orderDate             DateTime      @default(now())
  requiredDeliveryDate  DateTime
  totalAmount           Float
  status                POStatus      @default(PENDING)
  shippingAddress       String        @db.Text
  billingAddress        String?       @db.Text
  paymentTerms          String?
  notes                 String?       @db.Text
  createdById           String
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relations
  quote      Quote       @relation(fields: [quoteId], references: [id])
  vendor     Vendor      @relation(fields: [vendorId], references: [id])
  createdBy  User        @relation(fields: [createdById], references: [id])
  items      POItem[]
  shipments  Shipment[]
  invoices   Invoice[]

  @@index([poNumber])
  @@index([status])
  @@index([vendorId])
}

model POItem {
  id          String  @id @default(cuid())
  poId        String
  productId   String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  received    Int     @default(0)

  po      PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)
  product Product       @relation(fields: [productId], references: [id])

  @@index([poId])
  @@index([productId])
}

enum POStatus {
  PENDING
  CONFIRMED
  PARTIALLY_SHIPPED
  SHIPPED
  PARTIALLY_DELIVERED
  DELIVERED
  CANCELLED
}

// ============================================
// Shipment & Logistics Models
// ============================================

model Shipment {
  id                    String          @id @default(cuid())
  shipmentNumber        String          @unique
  poId                  String
  vendorId              String
  trackingNumber        String?
  carrier               String?
  status                ShipmentStatus  @default(PENDING)
  shippedDate           DateTime?
  estimatedDeliveryDate DateTime?
  actualDeliveryDate    DateTime?
  location              String?
  notes                 String?         @db.Text
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  // Relations
  purchaseOrder PurchaseOrder     @relation(fields: [poId], references: [id])
  vendor        Vendor            @relation(fields: [vendorId], references: [id])
  items         ShipmentItem[]
  trackingLogs  ShipmentTracking[]

  @@index([shipmentNumber])
  @@index([trackingNumber])
  @@index([status])
}

model ShipmentItem {
  id          String @id @default(cuid())
  shipmentId  String
  sku         String
  quantity    Int
  received    Int    @default(0)

  shipment Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@index([shipmentId])
}

model ShipmentTracking {
  id          String   @id @default(cuid())
  shipmentId  String
  status      String
  location    String?
  description String?  @db.Text
  timestamp   DateTime @default(now())

  shipment Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@index([shipmentId])
}

enum ShipmentStatus {
  PENDING
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  DELAYED
  CANCELLED
}

// ============================================
// Quality & Compliance Models
// ============================================

model QualityCheck {
  id              String             @id @default(cuid())
  productId       String
  checkType       QualityCheckType
  status          QualityCheckStatus
  performedBy     String
  performedAt     DateTime           @default(now())
  result          String?            @db.Text
  notes           String?            @db.Text
  documentUrl     String?

  product Product @relation(fields: [productId], references: [id])

  @@index([productId])
  @@index([status])
}

enum QualityCheckType {
  LEAD_COMPLIANCE
  SAFETY_CERTIFICATION
  QUALITY_INSPECTION
  REGULATORY_COMPLIANCE
  VENDOR_AUDIT
}

enum QualityCheckStatus {
  PENDING
  PASSED
  FAILED
  UNDER_REVIEW
}

// ============================================
// Invoice & Financial Models
// ============================================

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  poId          String
  amount        Float
  taxAmount     Float?
  totalAmount   Float
  issueDate     DateTime      @default(now())
  dueDate       DateTime
  paidDate      DateTime?
  status        InvoiceStatus @default(PENDING)
  documentUrl   String?
  notes         String?       @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  purchaseOrder PurchaseOrder @relation(fields: [poId], references: [id])

  @@index([invoiceNumber])
  @@index([status])
  @@index([poId])
}

enum InvoiceStatus {
  PENDING
  PARTIALLY_PAID
  PAID
  OVERDUE
  CANCELLED
}

// ============================================
// Audit & Logging Models
// ============================================

model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  entity      String
  entityId    String
  oldValue    Json?
  newValue    Json?
  ipAddress   String?
  userAgent   String?  @db.Text
  timestamp   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entity, entityId])
  @@index([timestamp])
}
